<?php

namespace App\Http\Controllers;

use App\Models\BatchBook;
use App\Models\StudentBook;
use App\Models\BatchStudent;
use Illuminate\Http\Request;
use App\Traits\HasPermission;
use App\Models\StudentPayment;
use Illuminate\Support\Facades\DB;
use App\Traits\StudentNotification;
use App\Http\Controllers\Controller;
use App\Models\StudentBooksFeedback;
use Illuminate\Support\Facades\Auth;

class BatchBookController extends Controller
{
    use HasPermission;
    use StudentNotification;
    public $studentPayment;
    public function __construct(Request $request)
    {
        $this->studentPayment =new StudentPayment();
        $this->page_title = $request->route()->getName();
        $description = \Request::route()->getAction();
        $this->page_desc = isset($description['desc']) ? $description['desc'] : $this->page_title;
    }

    public function index()
    {
        $data['page_title'] 	= $this->page_title;
        $data['module_name']	= "Courses";
        $data['sub_module']		= "Books";

        $admin_user_id  		= Auth::user()->id;
        $add_action_id  		= 116; // Payment entry
        $add_permisiion 		= $this->PermissionHasOrNot($admin_user_id,$add_action_id );
        $data['actions']['add_permisiion']= $add_permisiion;

        return view('course.book',$data);
    }
    
    public function bookList($batchId)
    {
        $return_arr  = array(); 
        $books = BatchBook::where('batch_id',$batchId)->get();
       
        foreach ($books as $book) {           
            $data['name'] = $book->book_no;
            $data['status'] = ($book->status == 'Active') ? "<button class='btn btn-xs btn-success' disabled>Active</button>" : "<button class='btn btn-xs btn-danger' disabled>Inactive</button>";
            $data['id'] = $book->id; 
            $data['action'] = "<a href='javascript:void(0)' title='Edit' onclick='bookEdit(".$book->id.")' id=edit_" . $book->id . " class='btn btn-xs btn-hover-shine  btn-primary' ><i class='lnr-pencil'></i></a>";
            $return_arr[] = $data;
        }
        return $return_arr;
    }

    public function studenBookList($batchId)
    {
        $return_arr  = array(); 
        $sql = "SELECT student_name,student_enrollment_id,student_status,
        GROUP_CONCAT(student_book_details) student_book_details
            FROM (
                SELECT  s.name AS student_name, bb.id, bs.student_enrollment_id, bs.status AS student_status,
            CONCAT(sb.id,'@', bb.book_no , '@',ifnull(sb.sent_date,'')) AS student_book_details
            
                FROM batch_books bb
                LEFT JOIN student_books sb ON sb.batch_book_id = bb.id
                LEFT JOIN batch_students bs ON bs.id = sb.batch_student_id
                LEFT JOIN students s ON s.id = sb.student_id
                WHERE bb.batch_id=$batchId  
                ORDER BY bb.id ASC
            )A
            GROUP BY student_name 
            ORDER BY  id,student_name";

        $studentBooks   = DB::select($sql);
        $table  = "";
        if(count($studentBooks) > 0){
            $tableHead = $tableBody = "";
            $once= 1;
            foreach ($studentBooks as $studentBook) {  
                $statusHtml = ($studentBook->student_status =="Active")?"<button class='btn btn-xs btn-success' disabled >$studentBook->student_status</button>":"<button class='btn btn-xs btn btn-danger' disabled>$studentBook->student_status</button>";

                $tableBody .= "<tr role='row'>";
				$tableBody .= "<td>".$studentBook->student_enrollment_id."</td>";
                $tableBody .= "<td>".$studentBook->student_name."</td>";                
                $tableBody .= "<td>$statusHtml</td>";

                $bookInfoArr        = explode(',',$studentBook->student_book_details);
                $studentBookInfoArr = array();
                foreach($bookInfoArr as $bookInfo){
                    $singleBookArr  = explode('@',$bookInfo);
                    $studentBookId  = $singleBookArr[0];
                    $studentBookNo  = $singleBookArr[1];
                    $studentBookSent= ($singleBookArr[2]!="")?'checked':'';
                    $disabled       = ($studentBook->student_status =="Inactive")?"disabled":"";

                    $tableBody .= '<td class="text-center book-check"><input onclick="sendBook('.$studentBookId.')" style="cursor: pointer;" '.$disabled.' type="checkbox" '.$studentBookSent.'  name="status" value="'.$studentBookId.'"></td>';

                    $feedbackHtml = "";
                    $bookfeedbacks = StudentBooksFeedback::with('createdBy')->where('student_book_id',$studentBookId)->get();
					//dd($bookfeedbacks);
					if(count($bookfeedbacks)>0){
                        foreach($bookfeedbacks as $bookfeedback){
                            $feedbackHtml .=$bookfeedback->feedback." (".$bookfeedback->createdBy->first_name." @".date('Y-m-d', strToTime($bookfeedback->created_at)).")</br>";
                        }
                    }
                   $addFeedbackButton =  "<div class='col-md-12 text-right'><a href='javascript:void(0)' title='Add Feedback' onclick='addFeedback(".$studentBookId.")'  class='btn btn-xs btn-hover-shine  btn-success' >+</a></div>";

                    $tableBody .= "<td>".$feedbackHtml.$addFeedbackButton."</td>";

                    if($once)$tableHead .=  "<th class='text-center'>".$studentBookNo."</th><th class='text-center'>Feedback</th>";
                }
                $once =0;
                $tableBody .= "</tr>";
            }
            $table = "
                <table class='table table-bordered table-hover dataTable no-footer' id='student_books_table'  style='width:100% !important' >
                <thead>
                    <tr>                        
                        <th>Enrollment Id</th>
						<th>Student Name</th>
                        <th>Status</th>
                        $tableHead
                    </tr>
                </thead>
                <tbody>
                    $tableBody
                </tbody>
            </table>
            ";
        }
        else{
            $table = '<div class="col-md-12 alert alert-danger text-center">No record found. Add Book?</div>';
        }

        return $table;
    }
        
    public function saveBook(Request $request)
    {
        try {
            $rule = [
                'book_name' => 'required',	
                'batch_id' => 'required',		
            ];
            $validation = \Validator::make($request->all(), $rule);
            //dd($request);

            if ($validation->fails()) {
                $return['response_code'] = 0;
                $return['errors'] = $validation->errors();
                return json_encode($return);
            } else {
                DB::beginTransaction();

                if($request['edit_id']){
                    $batchBook          = BatchBook::findOrFail($request['edit_id']);
                    $batchBook->book_no = $request['book_name'];
                    $batchBook->status  = (isset($request['status'])) ? 'Active' : 'Inactive';
                    $batchBook->save();
                }
                else{
                    $data = [                   
                        'batch_id'  => $request['batch_id'],
                        'book_no'   => $request['book_name'],
                        'status'    => (isset($request['status'])) ? 'Active' : 'Inactive',
                        'created_by'      =>  Auth::user()->id
                    ];

                    $batchBook = BatchBook::create($data);
                    if($batchBook){
                        $batchStudents = BatchStudent::where('batch_id',$request['batch_id'])->get();
                        
                        foreach($batchStudents as $batchStudent){
                            $studentData = [                   
                                'batch_book_id'     => $batchBook->id,
                                'student_id'        => $batchStudent->student_id,
                                'batch_student_id'  => $batchStudent->id,
                                'status'            => $batchStudent->status,
                            ];
                            StudentBook::create($studentData);
                        }        
                    }
                }
                DB::commit();
                $return['response_code']    = 1;
                $return['message']          = "Book saved successfully";
                return json_encode($return);
            }
        } catch (\Exception $e) {
            DB::rollback();
            $return['response_code'] = 0;
            $return['errors'] = "Failed to save !" . $e->getMessage();
            return json_encode($return);
        }
    }

    public function saveFeedback(Request $request)
    {
        try {
            $rule = [
                'feedback_details' => 'required',	
                'student_book_id' => 'required',		
            ];
            $validation = \Validator::make($request->all(), $rule);
            //dd($request);

            if ($validation->fails()) {
                $return['response_code'] = 0;
                $return['errors'] = $validation->errors();
                return json_encode($return);
            } else {
                DB::beginTransaction();
                $data = [                   
                    'feedback'          => $request['feedback_details'],
                    'student_book_id'   => $request['student_book_id'],
					'created_by'		=> Auth::user()->id
                ];
                StudentBooksFeedback::create($data);
                
                DB::commit();
                $return['response_code']    = 1;
                $return['message']          = "Feedback saved successfully";
                return json_encode($return);
            }
        } catch (\Exception $e) {
            DB::rollback();
            $return['response_code'] = 0;
            $return['errors'] = "Failed to save !" . $e->getMessage();
            return json_encode($return);
        }
    }
    
    public function studenBookSend($studentBookId)
    {
        try {
            DB::beginTransaction();
            $studentBook = StudentBook::with('student', 'book','book.batch','book.batch.course')->where('id',$studentBookId)->first();
            $studentBook->sent_date = date('Y-m-d');
			$sentOrNot   = $studentBook->status;
            $sent = $studentBook->save();
            if($sent && $sentOrNot=='Inactive'){
                $this->bookSentNotificationForStudent($studentBook);  
            }
              
            DB::commit();
            $return['response_code']    = 1;
            $return['message']          = "Book sent successfully";
            return json_encode($return);
        } catch (\Exception $e) {
            DB::rollback();
            $return['response_code'] = 0;
            $return['errors'] = "Failed to send !" . $e->getMessage();
            return json_encode($return);
        }
    }

    //student_name course_name from_batch_name to_batch_name transfer_date fee actions
}
